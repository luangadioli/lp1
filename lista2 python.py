# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oetiGvDfM27e-b0AjaLkBXjZXBS25ev7
"""

#questão11
frase = (input('Digite uma frase: '))
frase2 = frase[::-1]

def palíndromo (frase,frase2):
 if frase == frase2:
       print(" é um palíndromo")  
 else:
       print("não é um palíndromo")
palíndromo(frase,frase2)

#questão12
frase = (input('Digite uma frase: '))
frase2 = (input('Digite uma frase: '))
cont = 0
def anagrama (frase,frase2,cont):
 for i in range(len(frase)): 
  for j in range(len(frase2)): 
    if frase[i] == frase2[j]:
      cont += 1 # cont = cont + 1 
      break
 if cont == i + 1:
   print("ANAGRAMA")  
 else:
   print("NÃO É UM ANAGRAMA")   


anagrama(frase, frase2,cont)

#questão13

m2 = [[8,9],[5,6],[4,4]] 
m1 = [[1,2,1],[3,4,1]]


def linhaColuna2(a,b):
  if (len(a) >= len(b)):
    return a,b
  return b,a

def testaSePossiveMultiplicarMatrizes2(a,b):
  retorno = False
  if (len(a) == len(b[0])):
    retorno = True
  
  return retorno

def multiplicaMatrizes2(a,b):

  r = []

  for i in range(len(a)):
    linhaAux = []
    for j in range(len(b[0])):      
      aux = 0
      for w in range(len(b)):
        aux += a[i][w]*b[w][j]
      linhaAux.append(aux)
    r.append(linhaAux)

  return r

a,b = linhaColuna2(m1,m2)
if testaSePossiveMultiplicarMatrizes2(a,b):
  print(multiplicaMatrizes2(a,b))
else:
  print("não é possível multiplicar as matrizes")

#questão14
m1 = [[8,9],[5,6]] 
m2 = [[1,2],[3,4]]
m3 = [["",""]],[["",""]]


def linhaColuna2(a,b):
  if (len(a) >= len(b)):
    return a,b
  return b,a

def testaSePossiveMultiplicarMatrizes2(a,b):
  retorno = False
  if (len(a) == len(b[0])):
    retorno = True
  
  return retorno

def multiplicaMatrizes2(a,b):

  r = []

  for i in range(len(a)):
    linhaAux = []
    for j in range(len(b[0])):      
      aux = 0
      for w in range(len(b)):
        aux += a[i][w]*b[w][j]
      linhaAux.append(aux)
    r.append(linhaAux)

  return r

def subtração(a,b):
 for i in range(len(a)):
   for j in range(len(b[0])):
     m3[i][j] = a[i][j] - b[i][j]
 print(m3)
   
def adição(a,b):
 m3 = [["",""]],[["",""]]
 for i in range(len(a)):
   for j in range(len(b[0])):
     m3[i][j] = a[i][j] + b[i][j]
 print(m3)

linhaColuna2,testaSePossiveMultiplicarMatrizes2, multiplicaMatrizes2

#questão15
n1 =int(input('Digite o valor inicial: '))
n2 = int(input('Digite o valor final: '))
lista = []
for i in range(n1,n2+1):
  cont = 0
  for j in range(i ,1, -1):
    if i % j == 0:
      cont += int (i / j)
  if cont == i:
    print(cont)
    lista.append(cont)
print(lista)

#questão16
m1 = [["_","_","_"],["_","_","_"],["_","_","_"]]
looping = True
empate = False
def jogodavelha ():
  print(m1[0][0],m1[0][1],m1[0][2])
  print(m1[1][0],m1[1][1],m1[1][2])
  print(m1[2][0],m1[2][1],m1[2][2])

while looping:
  valido = False 
  while not valido:
    posicao = int(input("em qual linha você quer jogar"))-1
    posicao1 =int(input("em qual coluna você quer jogar"))-1 
    
    if m1[posicao][posicao1] == "0" or m1[posicao][posicao1] == "*":
      print("posição inválida")
    else:
      m1[posicao][posicao1] = "*"
      valido = True
   
  jogodavelha ()

  if (m1[0][0] == '*' and m1[0][1] == '*' and m1[0][2] == '*') or (m1[1][0] == '*' and m1[1][1] == '*' and m1[1][2] == '*') or (m1[2][0] == '*' and m1[2][1] == '*' and m1[2][2] == '*') or (m1[0][0] == '*' and m1[1][0] == '*' and m1[2][0] == '*') or (m1[0][1] == '*' and m1[1][1] == '*' and m1[2][1] == '*') or (m1[0][2] == '*' and m1[1][2] == '*' and m1[2][2] == '*') or (m1[0][0] == '*' and m1[1][1] == '*' and m1[2][2] == '*') or (m1[0][2] == '*' and m1[1][1] == '*' and m1[2][0] == '*'):
    vencedor = "*"
    break
  
  total = 0
  for i in range(len(m1)):
    for j in range(len(m1[0])):
      if m1[i][j] != '_':
        total += 1
  if total == 9:
    empate = True
    break

  valido = False 
  while not valido:
    posicao = int(input("em qual linha você quer jogar"))-1
    posicao1 =int(input("em qual coluna você quer jogar"))-1 
    
    if m1[posicao][posicao1] == "0" or m1[posicao][posicao1] == "*":
      print("posição inválida")
    else:
      m1[posicao][posicao1] = "0"
      valido = True
   
  jogodavelha ()
  if (m1[0][0] == '0' and m1[0][1] == '0' and m1[0][2] == '0') or (m1[1][0] == '0' and m1[1][1] == '0' and m1[1][2] == '0') or (m1[2][0] == '0' and m1[2][1] == '0' and m1[2][2] == '0') or (m1[0][0] == '0' and m1[1][0] == '0' and m1[2][0] == '0') or (m1[0][1] == '0' and m1[1][1] == '0' and m1[2][1] == '0') or (m1[0][2] == '0' and m1[1][2] == '0' and m1[2][2] == '0') or (m1[0][0] == '0' and m1[1][1] == '0' and m1[2][2] == '0') or (m1[0][2] == '0' and m1[1][1] == '0' and m1[2][0] == '0'):
    vencedor = "0"
    break
  
  total = 0 #conferir se os espaços estão sendo usados
  for i in range(len(m1)):
    for j in range(len(m1[0])):
      if m1[i][j] != '_':
        total += 1
  if total == 9:
    empate = True
    break

if empate:
  print("empatou galera")
else:
  print("o ganhador foi", vencedor)